FORMAT: 1A
HOST: http://polls.apiblueprint.org/

# Device Management API

Endpoints to manage connected devices.

# Group Introduction

This Device Manager is responsible for dealing with management operations (CRUD) over devices. 
All devices are created based on a "template", which can be thought as a model of a device, such as that particular sensor sold by that company which emits its readings via MQTT using a strange format. In fact, templates can represent more than just a device model: for instance, it can be a way to represent all 

# Group Devices

## Devices [/device]
### Get the current list of devices [GET]
Get the full list of devices with all their associated attributes
+ Request
  + Headers
    Authorization: Bearer JWT
+ Response 200 (application/json)
  {
    "devices": [
        {
            "attrs": [
                {
                    "created": "2017-10-06T10:48:15.795690+00:00",
                    "id": 1,
                    "label": "custom.a",
                    "template_id": "1",
                    "type": "dynamic",
                    "value_type": "string"
                },
                {
                    "created": "2017-10-06T10:48:15.797245+00:00",
                    "id": 2,
                    "label": "custom.b",
                    "template_id": "1",
                    "type": "dynamic",
                    "value_type": "string"
                },
                {
                    "created": "2017-10-06T10:48:15.797639+00:00",
                    "id": 3,
                    "label": "custom.c",
                    "template_id": "1",
                    "type": "dynamic",
                    "value_type": "string"
                }
            ],
            "created": "2017-10-06T10:48:15.798365+00:00",
            "device_id": "0425",
            "frequency": 2000,
            "label": "test-device",
            "protocol": "MQTT",
            "template": 1
        },
        {
            "attrs": [
                {
                    "created": "2017-10-06T10:48:15.795690+00:00",
                    "id": 1,
                    "label": "custom.a",
                    "template_id": "1",
                    "type": "dynamic",
                    "value_type": "string"
                },
                {
                    "created": "2017-10-06T10:48:15.797245+00:00",
                    "id": 2,
                    "label": "custom.b",
                    "template_id": "1",
                    "type": "dynamic",
                    "value_type": "string"
                },
                {
                    "created": "2017-10-06T10:48:15.797639+00:00",
                    "id": 3,
                    "label": "custom.c",
                    "template_id": "1",
                    "type": "dynamic",
                    "value_type": "string"
                }
            ],
            "created": "2017-10-06T10:48:18.220313+00:00",
            "device_id": "6888",
            "frequency": 2000,
            "label": "test-device",
            "protocol": "MQTT",
            "template": 1,
            "updated": "2017-10-06T11:00:49.127223+00:00"
        }
    ],
    "pagination": {
        "has_next": false,
        "next_page": null,
        "page": 1,
        "total": 1
    }
  }


### Register a new device [POST]
Register a new device
+ Request (application/json)
  + Headers
    Authorization: Bearer JWT
  + Body
    {
      "label": "test-device",
      "protocol": "MQTT",
      "attrs": [
          {"label": "custom.a", "type": "dynamic", "value_type": "string"},
          {"label": "custom.b", "type": "dynamic", "value_type": "string"},
          {"label": "custom.c", "type": "dynamic", "value_type": "string"}
      ]
    }
+ Response 200 (application/json)
  {
    "device": {
      "protocol": "MQTT",
      "created": "2017-10-06T10:48:18.220313+00:00",
      "label": "test-device",
      "frequency": 2000,
      "attrs": [
        {
          "template_id": "2",
          "created": "2017-10-06T10:48:18.220972+00:00",
          "label": "custom.a",
          "value_type": "string",
          "type": "dynamic",
          "id": 4
        },
        {
          "template_id": "2",
          "created": "2017-10-06T10:48:18.221577+00:00",
          "label": "custom.b",
          "value_type": "string",
          "type": "dynamic",
          "id": 5
        },
        {
          "template_id": "2",
          "created": "2017-10-06T10:48:18.221989+00:00",
          "label": "custom.c",
          "value_type": "string",
          "type": "dynamic",
          "id": 6
        }
      ],
      "template": 2,
      "device_id": "6888"
    },
    "message": "device created"
  }
+ Response 400 (application/json)
  {"status" : "Faied to parse payload as JSON"}
+ Response 400 (application/json)
  {"status" : "unknown request format"}
+ Response 400 (application/json)
  {"status" : "missing protocol"}
+ Response 400 (application/json)
  {"status" : "device has missing fields"}
+ Response 304 (application/json)
  {"status" : "missing authorization info"}
+ Response 500 (application/json)
  {"status" : "failed to generate unique id"}
+ Response 500 (application/json)
  {"status" : "failed to configure device"}



## Device info [/devices/{id}]
Access a specific device
+ parameters
  + id: (required, string) - The device ID

### Get device info [GET]
Retrieves all information from a specific device
+ Request
  + Headers
    Authorization: Bearer JWT
+ Response 200 (application/json)
  {
    "attrs": [
        {
            "created": "2017-10-06T10:48:15.795690+00:00",
            "id": 1,
            "label": "custom.a",
            "template_id": "1",
            "type": "dynamic",
            "value_type": "string"
        },
        {
            "created": "2017-10-06T10:48:15.797245+00:00",
            "id": 2,
            "label": "custom.b",
            "template_id": "1",
            "type": "dynamic",
            "value_type": "string"
        },
        {
            "created": "2017-10-06T10:48:15.797639+00:00",
            "id": 3,
            "label": "custom.c",
            "template_id": "1",
            "type": "dynamic",
            "value_type": "string"
        }
    ],
    "created": "2017-10-06T10:48:18.220313+00:00",
    "device_id": "6888",
    "frequency": 2000,
    "label": "test-device",
    "protocol": "MQTT",
    "template": 1,
    "updated": "2017-10-06T11:00:49.127223+00:00"
  }
+ Response 404 (application/json)
  {
      "message": "No such device: aaaa",
      "status": 404
  }

### Delete device [DELETE]
Removes a device
+ Response 200 (application/json)
  {
    "removed_device": {
        "attrs": [
            {
                "created": "2017-10-06T10:48:15.795690+00:00",
                "id": 1,
                "label": "custom.a",
                "template_id": "1",
                "type": "dynamic",
                "value_type": "string"
            },
            {
                "created": "2017-10-06T10:48:15.797245+00:00",
                "id": 2,
                "label": "custom.b",
                "template_id": "1",
                "type": "dynamic",
                "value_type": "string"
            },
            {
                "created": "2017-10-06T10:48:15.797639+00:00",
                "id": 3,
                "label": "custom.c",
                "template_id": "1",
                "type": "dynamic",
                "value_type": "string"
            }
        ],
        "created": "2017-10-06T10:48:18.220313+00:00",
        "device_id": "6888",
        "frequency": 2000,
        "label": "test-device",
        "protocol": "MQTT",
        "template": 1,
        "updated": "2017-10-06T11:00:49.127223+00:00"
    },
    "result": "ok"
  }

+ Response 404 (application/json)
  {
    "message": "No such device: aaaa",
    "status": 404
  }

### Update device info [PUT]
Replaces all attributes from a specific device
+ Request
  + Headers
    Authorization: Bearer JWT
  + Body
    {
      "device_id": "6888",
      "frequency": 2000,
      "label": "test-device",
      "protocol": "MQTT",
      "template": 1
    }
+ Response 200 (application/json)
  {
    "device": {
      "updated": "2017-10-06T11:00:49.127223+00:00",
      "protocol": "MQTT",
      "created": "2017-10-06T10:48:18.220313+00:00",
      "label": "test-device",
      "frequency": 2000,
      "attrs": [
        {
          "template_id": "1",
          "created": "2017-10-06T10:48:15.795690+00:00",
          "label": "custom.a",
          "value_type": "string",
          "type": "dynamic",
          "id": 1
        },
        {
          "template_id": "1",
          "created": "2017-10-06T10:48:15.797245+00:00",
          "label": "custom.b",
          "value_type": "string",
          "type": "dynamic",
          "id": 2
        },
        {
          "template_id": "1",
          "created": "2017-10-06T10:48:15.797639+00:00",
          "label": "custom.c",
          "value_type": "string",
          "type": "dynamic",
          "id": 3
        }
      ],
      "template": 1,
      "device_id": "6888"
    },
    "message": "device updated"
  }
+ Response 400 (application/json)
  {"status" : "unknown request format"}
+ Response 404 (application/json)
  {"status" : "given device was not found"}
+ Response 500 (application/json)
  {"status" : "failed to update device configuration"}



# Group Templates
## Templates [/template]

### Get the current list of templates [GET]
Get the full list of templates with all their associated attributes
+ Request
  + Headers
    Authorization: Bearer JWT
+ Response 200 (application/json)
  {
    "pagination": {
      "has_next": false,
      "next_page": null,
      "page": 1,
      "total": 1
    },
    "templates": [
      {
        "attrs": [
          {
            "created": "2017-10-09T18:58:06.560734+00:00",
            "id": 1,
            "label": "attr.a",
            "template_id": "1",
            "type": "dynamic",
            "value_type": "string"
          },
          {
            "created": "2017-10-09T18:58:06.562147+00:00",
            "id": 2,
            "label": "attr.b",
            "template_id": "1",
            "type": "dynamic",
            "value_type": "string"
          }
        ],
        "created": "2017-10-09T18:58:06.558058+00:00",
        "id": 1,
        "label": "test_template"
      },
      {
        "attrs": [
          {
            "created": "2017-10-09T18:58:08.587078+00:00",
            "id": 5,
            "label": "attr.a",
            "template_id": "3",
            "type": "dynamic",
            "value_type": "string"
          },
          {
            "created": "2017-10-09T18:58:08.587522+00:00",
            "id": 6,
            "label": "attr.b",
            "template_id": "3",
            "type": "dynamic",
            "value_type": "string"
          }
        ],
        "created": "2017-10-09T18:58:08.586395+00:00",
        "id": 3,
        "label": "test_template"
      },
      {
        "attrs": [
          {
            "created": "2017-10-09T19:12:40.176937+00:00",
            "id": 11,
            "label": "attr.a",
            "template_id": "4",
            "type": "dynamic",
            "updated": "2017-10-09T19:13:31.138364+00:00",
            "value_type": "string"
          },
          {
            "created": "2017-10-09T19:12:40.177666+00:00",
            "id": 12,
            "label": "attr.b",
            "static_value": "qwer",
            "template_id": "4",
            "type": "meta",
            "updated": "2017-10-09T19:13:31.138995+00:00",
            "value_type": "mapping"
          }
        ],
        "created": "2017-10-09T19:02:47.462534+00:00",
        "id": 4,
        "label": "test_template_upd",
        "updated": "2017-10-09T19:12:40.175548+00:00"
      }
    ]
  }


### Register a new template [POST]
Register a new template
+ Request
  + Headers
    Authorization: Bearer JWT
  + Body (application/json)
    {
      "label": "test_template",
      "attrs": [
        {"label":"attr.a","type":"dynamic","value_type":"string"},
        {"label":"attr.b","type":"dynamic","value_type":"string"}
      ]
    }
+ Response 200 (application/json)
  {
  "result": "ok",
  "template": {
    "attrs": [
      {
        "created": "2017-10-09T19:02:47.463580+00:00",
        "id": 7,
        "label": "attr.a",
        "template_id": "4",
        "type": "dynamic",
        "value_type": "string"
      },
      {
        "created": "2017-10-09T19:02:47.464119+00:00",
        "id": 8,
        "label": "attr.b",
        "template_id": "4",
        "type": "dynamic",
        "value_type": "string"
      }
    ],
    "created": "2017-10-09T19:02:47.462534+00:00",
    "id": 4,
    "label": "test_template"
  }
}
+ Response 400 (application/json)
  {
    "errors": {
        "label": [
            "Missing data for required field."
        ]
    },
    "message": "failed to parse input"
  }

## Template info [/template/{id}]
Access a specific template
+ parameters
  + id: (required, string) - The template ID


### Delete template [DELETE]
Removes a template
+ Response 200 (application/json)
  {
    "removed": {
      "attrs": [
        {
          "created": "2017-10-09T18:58:07.681866+00:00",
          "id": 3,
          "label": "attr.a",
          "template_id": "2",
          "type": "dynamic",
          "value_type": "string"
        },
        {
          "created": "2017-10-09T18:58:07.682231+00:00",
          "id": 4,
          "label": "attr.b",
          "template_id": "2",
          "type": "dynamic",
          "value_type": "string"
        }
      ],
      "created": "2017-10-09T18:58:07.681183+00:00",
      "id": 2,
      "label": "test_template"
    },
    "result": "ok"
  }
+ Response 404 (application/json)
  {
    "message": "No such template: 123",
    "status": 404
  }

### Get template info [GET]
Retrieves all information from a specific template
+ Response 200 (application/json)
  {
  "attrs": [
    {
      "created": "2017-10-09T18:58:06.560734+00:00",
      "id": 1,
      "label": "attr.a",
      "template_id": "1",
      "type": "dynamic",
      "value_type": "string"
    },
    {
      "created": "2017-10-09T18:58:06.562147+00:00",
      "id": 2,
      "label": "attr.b",
      "template_id": "1",
      "type": "dynamic",
      "value_type": "string"
    }
  ],
  "created": "2017-10-09T18:58:06.558058+00:00",
  "id": 1,
  "label": "test_template"
}
+ Response 404 (application/json)
  {
    "message": "No such template: 123",
    "status": 404
  }
### Update template info [PUT]
Replaces all attributes from a specific template
+ Response 200 (application/json)
  {
    "result": "ok",
    "updated": {
      "attrs": [
        {
          "created": "2017-10-09T19:12:40.176937+00:00",
          "id": 11,
          "label": "attr.a",
          "template_id": "4",
          "type": "dynamic",
          "value_type": "string"
        },
        {
          "created": "2017-10-09T19:12:40.177666+00:00",
          "id": 12,
          "label": "attr.b",
          "static_value": "asdf",
          "template_id": "4",
          "type": "meta",
          "value_type": "mapping"
        }
      ],
      "created": "2017-10-09T19:02:47.462534+00:00",
      "id": 4,
      "label": "test_template_upd",
      "updated": "2017-10-09T19:12:40.175548+00:00"
    }
  }
+ Response 404 (application/json)
  {
    "message": "No such template: 123",
    "status": 404
  }
